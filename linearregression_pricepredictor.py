# -*- coding: utf-8 -*-
"""LinearRegression_PricePredictor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g1ACX0wdgGziqIQ0fel0n3bTkXjut_m5
"""

import pandas as pd
import numpy as np

x_train = np.array([1, 2, 3])
y_train = np.array([100, 200, 300])

def cost_function(x, y, w, b):
    m = x.shape[0]
    cost_sum = 0  # Initialize cost_sum
    for i in range(m):
        f_wb = w * x[i] + b
        cost_sum += (f_wb - y[i])**2  # Update cost_sum
    total_cost = (1/(2*m)) * cost_sum
    return total_cost

def gradient(x, y, w, b):
    m = x.shape[0]
    dj_db = 0
    dj_dw = 0

    for i in range(m):
        f_wb = w * x[i] + b
        dj_db_i = (f_wb - y[i]) * x[i]
        dj_dw_i = f_wb - y[i]
        dj_dw += dj_dw_i
        dj_db += dj_db_i

    return dj_db/m, dj_dw/m

def gradient_descent(x, y, w_init, b_init, alpha, number_iters, cost_function, gradient_function):
    w = w_init
    b = b_init

    for i in range(number_iters):
        dj_dw, dj_db = gradient_function(x, y, w, b)
        w = w - alpha * dj_dw  # Update w directly
        b = b - alpha * dj_db  # Update b directly

    return w, b

w_init = 0
b_init = 0
tm_alpha = 0.01
iterations = 1000

w_final, b_final = gradient_descent(x_train, y_train, w_init, b_init, tm_alpha, iterations, cost_function, gradient)
print(f"(w, b) found by gradient descent: ({w_final:8.4f}, {b_final:8.4f})")
print(f"1000 sqft house prediction {w_final*1 + b_final:0.1f} Thousand dollars")